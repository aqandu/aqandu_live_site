var baseURL='http://air.eng.utah.edu';function generateURL(anEndpoint,route,parameters){let url='';if(route==='/rawDataFrom?'){url=`${baseURL}${anEndpoint}${route}id=${parameters.id}&start=${parameters.start}&end=${parameters.end}&show=${parameters.show}`;}else if(route==='/liveSensors'){url=`${baseURL}${anEndpoint}${route}`;}
return url;}
function getDataFromDB(anURL){return new Promise((resolve,reject)=>{const method='GET';const async=true;const request=new XMLHttpRequest();request.open(method,anURL,async);request.onreadystatechange=function processingResponse(){if(request.readyState===4&&request.status===200){const response=JSON.parse(request.responseText);resolve(response);}
request.onerror=function showWarning(e){console.log('Something went wrong....');reject(e);};};request.send();});}
const today=new Date().toISOString().substr(0,19)+'Z';const date=new Date();date.setDate(date.getDate()-1);const yesterday=date.toISOString().substr(0,19)+'Z';const x=d3.scaleTime().domain([new Date(yesterday),new Date(today)]);const lineColor=d3.scaleOrdinal(d3.schemeCategory10);const y=d3.scaleLinear().domain([0.0,120.0]);const sensLayer=L.layerGroup();const margin={top:20,right:30,bottom:30,left:40,};const dbEndpoint='/dbapi/api';const liveSensorURL=generateURL(dbEndpoint,'/liveSensors',null);getDataFromDB(liveSensorURL).then((data)=>{const response=data.map((d)=>{if(d['Sensor Source']==='Purple Air'){d.pm25=conversionPM(d.pm25,d['Sensor Model']);}
return d});sensorLayer(response);}).catch((err)=>{alert('error, request failed!');console.log('Error: ',err)});function setupMap(){const map=L.map('SLC-map',{center:[40.7608,-111.8910],zoom:13});L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1Ijoic2tpdHJlZSIsImEiOiJjajUyb2l0YzQwaHJwMnFwMTNhdGwxMGx1In0.V5OuKXRdmwjq4Lk3o8me1A',{maxZoom:18,id:'mapbox.streets',accessToken:'pk.eyJ1Ijoic2tpdHJlZSIsImEiOiJjajUydDkwZjUwaHp1MzJxZHhkYnl3eTd4In0.TdQB-1U_ID-37stKON_osw'}).addTo(map);const legend=L.control({position:'bottomright'});legend.onAdd=function(map){this._div=L.DomUtil.create('div','legend');this.update(this._div);return this._div;};legend.update=function(thediv){var d3div=d3.select(thediv);var dataLabel=["Utah","PurpleAir","Mesowest","DAQ"];var labels=d3div.selectAll('div').data(dataLabel);labels.exit().remove();var labelsEnter=labels.enter().append('div');labels=labels.merge(labelsEnter);labels.text(d=>d);labels.on('mouseover',d=>{d3.select('#map').selectAll('.dot').classed('unhovered',true);d3.select('#map').selectAll('.'+d).classed('unhovered',false);});labels.on('mouseout',d=>{d3.select('#map').selectAll('.dot').classed('unhovered',false);});return thediv;}
legend.addTo(map);return map;}
var map=setupMap();let lineArray=[];window.onload=window.onresize=function(){setUp();}
function distance(lat1,lon1,lat2,lon2){const p=0.017453292519943295;const c=Math.cos;const a=0.5-c((lat2-lat1)*p)/2+
c(lat1*p)*c(lat2*p)*(1-c((lon2-lon1)*p))/2;return 12742*Math.asin(Math.sqrt(a));}
function findDistance(r,mark){var lt=mark.getLatLng().lat;var lng=mark.getLatLng().lng;var closestsensor=null;var sensorobject=null;r.forEach(function(item){if(item["Latitude"]!==null&&item["Longitude"]!==null){var d=distance(lt,lng,parseFloat(item["Latitude"]),parseFloat(item["Longitude"]));if(closestsensor===null){closestsensor=d;sensorobject=item;}else{if(closestsensor>d){closestsensor=d;sensorobject=item;}}}});return sensorobject;}
function findCorners(ltlg){var cornerarray=[];lt=ltlg.lat;lg=ltlg.lng;var lt1=lt-5.0;cornerarray.push(lt1);var lt2=lt+5.0;cornerarray.push(lt2);var lg1=lg-5.0;cornerarray.push(lg1);var lg2=lg+5.0;cornerarray.push(lg2);return cornerarray;}
function findNearestSensor(cornerarray,mark,callback){getDataFromDB(liveSensorURL).then((data)=>{response=data.map((d)=>{const newD={};newD.ID=d.ID;newD.Latitude=d.Latitude;newD.Longitude=d.Longitude;return newD;});var closest=findDistance(response,mark);callback(closest);}).catch((err)=>{alert("error, request failed!");console.log("Error: ",err);console.warn(arguments);});}
function preprocessDBData(id,sensorData){const processedSensorData=sensorData.map((d)=>{return{id:id,time:new Date(d.time),pm25:d['pm2.5 (ug/m^3)']};}).filter((d)=>{return d.pm25===0||!!d.pm25;});lineArray.push({id:id,sensorData:processedSensorData});drawChart();}
function drawChart(){var svg=d3.select("div svg");var bounds=svg.node().getBoundingClientRect();var width=bounds.width,height=bounds.height;var valueline=d3.line().x(function(d){return x(d.time);}).y(function(d){return y(d.pm25);})
var voronoi=d3.voronoi().x(function(d){return x(d.time);}).y(function(d){return y(d.pm25);}).extent([[-margin.left,-margin.top],[width+margin.right,height+margin.bottom]]);let lines=svg.select('#lines').selectAll('path').data(lineArray,function(d){return d.id;});lines.exit().remove();let linesEnter=lines.enter().append("path");lines=linesEnter.merge(lines);lines.attr('transform','translate('+margin.left+','+margin.top+')').attr("d",d=>{return valueline(d.sensorData);}).attr("class",d=>'line-style line'+d.id).attr("stroke",d=>lineColor(d.id));var focus=svg.select(".focus");function mouseover(d){let hoveredLine=svg.select('.line'+d.data.id);hoveredLine.classed("hover",true);hoveredLine.node().parentNode.appendChild(hoveredLine.node());console.log(d.data.time)
focus.attr("transform","translate("+(x(d.data.time)+margin.left)+","+(y(d.data.pm25)+margin.top)+")");focus.select("text").text(d.data.id);}
function mouseout(d){let hoveredLine=svg.select('.line'+d.data.id);hoveredLine.classed("hover",false);focus.attr("transform","translate(-100,-100)");}
console.log(lineArray);var listOfLists=lineArray.map(function(d){return d.sensorData;});var listOfPoints=d3.merge(listOfLists);var voronoiPolygons=voronoi.polygons(listOfPoints);var voronoiGroup=svg.select(".voronoi").attr('transform','translate('+margin.left+','+margin.top+')');var voronoiPaths=voronoiGroup.selectAll("path").data(voronoiPolygons);voronoiPaths.exit().remove();var voronoiPathsEnter=voronoiPaths.enter().append("path");voronoiPaths=voronoiPaths.merge(voronoiPathsEnter);voronoiPaths.attr("d",function(d){return d?"M"+d.join("L")+"Z":null;}).on("mouseover",mouseover).on("mouseout",mouseout);let labels=svg.select("#legend").selectAll("text").data(lineArray,d=>d.id);labels.exit().remove();}
function makeGraph(mark){findNearestSensor(findCorners(mark.getLatLng()),mark,function(sensor){mark=mark.bindPopup('<p>'+sensor["ID"]+'</p>').openPopup();var theRoute='/rawDataFrom?';var parameters={'id':sensor["ID"],'start':yesterday,'end':today,'show':'pm2.5'};var url=generateURL(dbEndpoint,theRoute,parameters);getDataFromDB(url).then(data=>{preprocessDBData(sensor["ID"],data)}).catch(function(err){alert("error, request failed!");console.log("Error: ",err)});});}
var markr=null;function onMapClick(e){markr=new L.marker(e.latlng).addTo(map)
makeGraph(markr);}
function setUp(){var div=d3.select(".timeline");var bounds=div.node().getBoundingClientRect();var svgWidth=bounds.width;var svgHeight=200;var width=svgWidth-margin.left-margin.right;var height=svgHeight-margin.top-margin.bottom;var svg=div.select("svg")
x.range([0,width]);y.range([height,0]);svg.attr("width",svgWidth).attr("height",svgHeight);var xAxis=d3.axisBottom(x).ticks(9);var yAxis=d3.axisLeft(y).ticks(7);svg.select(".x.axis").attr("transform","translate("+margin.left+","+(margin.top+height)+")").call(xAxis);svg.select(".x.label").attr("transform","translate("+(width/2)+" ,"+(height+margin.bottom+15)+")").style("text-anchor","middle").text("Time");svg.select(".y.axis").attr('transform','translate('+margin.left+','+margin.top+')').call(yAxis);svg.select(".y.label").attr("transform","rotate(-90)").attr("y",0).attr("x",0-(height/2)).attr("dy","1em").style("text-anchor","middle").text("PM 2.5 ug/m3");}
lonPromise=getData("leaflet/sample-data/XGPS1.csv");latPromise=getData("leaflet/sample-data/XGPS2.csv");pmValPromise=getData("leaflet/sample-data/YPRED.csv");lvArray=[];Promise.all([lonPromise,latPromise,pmValPromise]).then(function(promiseResults){var lon=promiseResults[0].trim().split('\n');lon=lon[0].split(',').map(value=>Number(value));var lat=promiseResults[1].trim().split('\n');lat=lat.map(row=>Number(row.split(',')[0]));var pmVal=promiseResults[2].split('\n');var results=[];if(pmVal.length!==lat.length){throw new Error('wrong number of lat coordinates');}
pmVal.forEach((row,latIndex)=>{row=row.split(',');if(row.length<=1){return;}
if(row.length!==lon.length){throw new Error('wrong number of lon coordinates');}
row.forEach((value,lonIndex)=>{results.push({lat:lat[latIndex],lon:lon[lonIndex],pmVal:Number(value)});});});makeHeat(results);});function getData(strng){return new Promise(function(resolve,reject){d3.text(strng,function(data){resolve(data);});});}
function sensorLayer(response){response.forEach(function(item){var dotIcon={iconSize:[20,20],iconAnchor:[20,20],popupAnchor:[0,0],html:''};if(item["Latitude"]!==null&&item["Longitude"]!==null){let classList='dot';if(item["pm25"]<=50){classList+=' green ';}
else if(item["pm25"]>50&&item["pm25"]<=100){classList=' yellow ';}
else if(item["pm25"]>100&&item["pm25"]<=150){classList=' orange ';}
else{classList=' red ';}
classList+=item["Sensor Source"].replace(/ /g,'');dotIcon.className=classList;var mark=new L.marker(L.latLng(parseFloat(item["Latitude"]),parseFloat(item["Longitude"])),{icon:L.divIcon(dotIcon)}).addTo(sensLayer).bindPopup("Sensor "+item["ID"]).on('click',onClick);}});}
var overlayMaps={"SensLayer":sensLayer};sensLayer.addTo(map);L.control.layers(null,overlayMaps).addTo(map);function onClick(e){makeGraph(this);}
function makeHeat(results){results=results.map(function(p){return[p["lat"],p["lon"],(p["pmVal"])/100]});heat=L.heatLayer(results).addTo(map);}
function clearData(){lineArray=[];d3.selectAll("#lines").html('');d3.selectAll(".voronoi").html('');}
function conversionPM(pm,sensorModel){if(sensorModel!=null){var model=sensorModel.split('+')[0];var pmv=0;if(model==='PMS5003'){pmv=(-1)*64.48285*Math.log(0.97176-(0.01008*pm));}else if(model==='PMS1003'){pmv=(-1)*54.22405*Math.log(0.98138-(0.00772*pm));}}else{pmv=pm;}
return pmv;}